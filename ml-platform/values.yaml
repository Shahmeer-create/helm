# Global configuration
global:
  db:
    host: "database-2.cluster-ch4kwmsespel.ap-south-1.rds.amazonaws.com"
    name: "first_1"
    user: "postgre"
    secretName: "db-secret"
  scaling:
    target_cpu_utilization: 70

# Default tenant configuration
tenants:
  tenant-a:
    resources:
      min_replicas: 1
      max_replicas: 3
      cpu_request: "50m"
      memory_request: "128Mi"
      cpu_limit: "100m"
      memory_limit: "256Mi"

  tenant-b:
    resources:
      min_replicas: 1
      max_replicas: 3
      cpu_request: "50m"
      memory_request: "128Mi"
      cpu_limit: "100m"
      memory_limit: "256Mi"

  tenant-c:
    resources:
      min_replicas: 1
      max_replicas: 3
      cpu_request: "50m"
      memory_request: "128Mi"
      cpu_limit: "100m"
      memory_limit: "256Mi"

# Gateway configuration
gateway:
  enabled: true
  image:
    repository: 615299766383.dkr.ecr.ap-south-1.amazonaws.com/my-app-gateway
    tag: latest
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8080
  ingress:
    enabled: true
    className: "alb"
    annotations:
      alb.ingress.kubernetes.io/scheme: "internet-facing"
      alb.ingress.kubernetes.io/target-type: "ip"
      alb.ingress.kubernetes.io/group.name: "ml-platform"
      alb.ingress.kubernetes.io/load-balancer-name: "ml-platform-alb"
      alb.ingress.kubernetes.io/healthcheck-path: "/health"
      alb.ingress.kubernetes.io/success-codes: "200"
      alb.ingress.kubernetes.io/healthcheck-interval-seconds: "15"
      alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "5"
      alb.ingress.kubernetes.io/healthy-threshold-count: "2"
      alb.ingress.kubernetes.io/unhealthy-threshold-count: "2"
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
      alb.ingress.kubernetes.io/subnets: subnet-0c379f3aed67d344b,subnet-0499e833f13c685e3 # Replace with your subnet IDs
# Other services configuration
servingModel:
  enabled: true
  image:
    repository: 615299766383.dkr.ecr.ap-south-1.amazonaws.com/my-app-serving
    tag: latest
  service:
    port: 8081

trainingModel:
  enabled: true
  schedule: "*/30 * * * *"  # Every 30 minutes to match earlier behavior
  image:
    repository: 615299766383.dkr.ecr.ap-south-1.amazonaws.com/my-app-training
    tag: latest
  service:
    port: 8081
  replicaCount: 1

trafficSender:
  enabled: true
  schedule: "*/5 * * * *"
  image:
    repository: 615299766383.dkr.ecr.ap-south-1.amazonaws.com/my-app-traffic
    tag: latest
  service:
    port: 8081
  replicaCount: 2
